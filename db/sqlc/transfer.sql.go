// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: transfer.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createTransfer = `-- name: CreateTransfer :one
insert into transfers (
    from_account_id,
    to_account_id,
    amount
) values (
    $1, $2, $3
) returning id, from_account_id, to_account_id, amount, created_at
`

type CreateTransferParams struct {
	FromAccountID uuid.UUID `json:"from_account_id"`
	ToAccountID   uuid.UUID `json:"to_account_id"`
	Amount        int64     `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getAllTransfers = `-- name: GetAllTransfers :many
select id, from_account_id, to_account_id, amount, created_at from transfers
order by created_at
limit $1
offset $2
`

type GetAllTransfersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllTransfers(ctx context.Context, arg GetAllTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransfers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfersByFromAccount = `-- name: GetTransfersByFromAccount :many
select id, from_account_id, to_account_id, amount, created_at from transfers
where from_account_id = $1
order by created_at
`

func (q *Queries) GetTransfersByFromAccount(ctx context.Context, fromAccountID uuid.UUID) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransfersByFromAccount, fromAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfersByToAccount = `-- name: GetTransfersByToAccount :many
select id, from_account_id, to_account_id, amount, created_at from transfers
where to_account_id = $1
order by created_at
`

func (q *Queries) GetTransfersByToAccount(ctx context.Context, toAccountID uuid.UUID) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransfersByToAccount, toAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrasfer = `-- name: GetTrasfer :one
select id, from_account_id, to_account_id, amount, created_at from transfers
where id = $1
`

func (q *Queries) GetTrasfer(ctx context.Context, id uuid.UUID) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTrasfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
